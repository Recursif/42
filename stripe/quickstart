
# Card Payments Quickstart

Securely collect card information from your customers and create a
card payment.


Accepting a card payment using Stripe is a two-step process,
with a client side and a server-side action:

1- From your website running in the customer's browser, Stripe
securely collects your customer's payment information and
returns a representative token. This, along with nay other
form data, is then submitted by the browser to your server.


2-Using the token, your server-side code makes an API request to
create a charge an d complete the payment.

Tokenization ensures that no sensitive card data ever needs to touch
your server so your integration can operate in a PCI compliant way.


## HTTPS requirement

All submissions of payment infp using Elements are made via a secure HTTPS
connection.

However, to protect youself from certain forms of man-in-the-middle attacks,
and to prevent your suctomers from seeing Mixed content warning in modern browser,
you must serve the page containing the payment form over HTTPS as well.

## Step 1: Set up Stripe Elements

Elements is available as part of Stripe.js.

<script src="https://js.stripe.com/v3/"></script>

To get starded, include this script on every page on your site, not just the checkout page.

Including the script on every page allows Stripe to detect anomalous behavior that may be indicative of fraud as
users browse your website.

Next, create an instance of Element:

javascript:

var stripe = Stripe('pk_test_6pRNASCoBOKtIshFeQd4XMUh')
var elements = stripe.elements();

We've placed a random API key in the code.
actual publishable API key to test this code through your Stripe account.

When you're ready to accept live card payments, replace
the test key for production uses.


## Step 2: Create your payment form

To securely collect card details from your customers,
Elements creates UI components for you that are hosted by Stripe.

THey are placed into payment form, rather than you creating them
directly.

To determine where to insert these components, create empty
DOM elements (containers) with unique IDs within your payment form.
We recommend placing your container within a <label> or next to a <label>
with a for attribute that matches the unique id of the element container.

By doing so, the element automatically gains focus when the customers clicks on the corresponding label.


For example:

<form action="/charge" method="post" id="payment-form">
  <div class="form-row">
    <label for="card-element">
      Credit or debit card
    </label>
    <div id="card-element">
      <!-- A stripe Element will be inserted here. -->
    </div>

    <!-- Used to display Element errors. -->
    <div id="card-errors" role="alert"></div>
  </div>

  <button>Submit Payment</button>
</form>
