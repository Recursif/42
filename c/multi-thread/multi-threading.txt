
# Multi Threading sous Linux 

Cet article utilise la bibliothèque LinuxThreads 
disponible en standard sur la majorité 
des distributions LINUX récentes.


## Qu'est-ce que le multi-threading?

Les programmeurs LINUX et plus généralement 
UNIX sont depuis longtemps habitués aux fonctionalités 
multi-taches de leur système.

Sous UNIX il est aisé de créer des processus fils 
à partir d'un processus existant l'appel système fork,
comme le montre le petit exemple de code ci-dessous:

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int i;

int main (int ac, char **av)
{
    int pid;

    i = 1;

    if ((pid = fork()) == 0)
    {
        /* Dans le fils */
        printf("Je suis le fils, pid = %d\n", getpid())
        sleep(2);
        printf ("Fin du fils, i = %d !\n", i);
        exit (0)
    }
    else if (pid > 0) {
        /* Dans le pere */
        pritnf ("Je suis le pere, pid = ùd\n", getpid());
        sleep (1);

        /* Modifie la variable */
        i = 2;
        printf ("le pere a modifie la variable a %s\n", i);
        exit (1);
    }
    else {
        /* Erreur */
        perror ("fork");
        exit (1);
    }
}


Les limites du fork apparaissent d'ores et déjà, 
lorsqu'il s'agit de partager des variables entre processus père 
et son fils.

Comme on le voit dans le petit exemple ci-dessus, 
la variable global i, modifiée par le père a toujours l'ancienne valeur
dans le fils.

Ceci est le comportement normal du fork qui duplique le contexte 
courant lors de la création d'un processus fils.

En plus d'empécher le partage de variables, 
la création d'un nouveau contexte est pénalisante 
au niveau performances.

Il en est de même pour le chanfement de contexte
(context switch), lorsdu passage d'un processus à 
un autre.


Un thread ressemble fortement à un processus 
fils classique à la différence qu'il partage 
beaucoup plus de données avec le processus 
qui l'à crée:

- les variables globales 
- les variables statiques locales
- les descripteurs de fichiers (file desciptor)

Le multi-threading donc est une technique de programmation 
permettant de profiter des avantages 
(et aussi de certaines contraintes) de l'utilisation des threads.


## Les biblios de threads 

De nombreux systèmes d'exploitation permettent 
aujourd'hui la programmation par threads.

On dénombre deux principaux types d'implémentations de threads:
- Au niveau utilisateur (user-kernel)
A ce moment la, la gestion des threads est entièrement 
faite dans l'espace utilisateur.

- Au niveau noyau (kernel-level). Dans ce cas, les threads sont 
directement gérés par le noyau.

Dans ce cas, la base de l'implémantation est entre-autes 
l'appel système clone, également utilisé pour la création 
de processus classiques:

NAME 
    clone - create a child process 

SYNOPSIS 
    #include <linux/shed.h>
    #include <linux/unistd.h>

    pid_t clone(void *sp, unsigned long flags)

DESCRIPTION
    clone is an alternate interface to fork, with more 
    options.  fork is equivalent to clone(0, SIGCLD|COPYVM).


## Comment créer des threads sous LINUX?

Voici un petit exemple de progrmme utilisant deux 
threads d'affichage:

#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

void *my_thread_process (void * arg)
{
    int i;

    for (i = 0; i < 5; i++) {
        printf ("Thread %s: %d\n", (char*)arg, i);
        sleep (1);
    }
    pthread_exit (0);
}

main (int ac, char **av)
{
    pthread_t th1, th2;
    void *ret;

    if (pthread_create (&th1, NULL, my_thread_process, "1") < 0) {
        fprintf (stderr, "pthread_create error for thread 1\n");
        exit (1);
    }

    if (pthread_create (&th1, NULL, my_thread_process, "2") < 0) {
        fprintf (stderr, "pthread_create error for thread 2\n");
        exit (1);
    }
    (void)pthread_join (th1, &ret);
    (void)pthread_join (th2, &ret);
}

La fonction pthread_create permet de créer le thread et de l'associer à 
la fonction my_thread_process.

On notera que le paramètre void *arg est au thread lors de sa création.

Après création des deux threads, le progamme principal attend la fin 
des threads en utilisant la fonction pthread_join.

Après compilation de ce programme par la commande:

cc -D_REENTRANT -o thread1 thread1.c -lpthread 

Il donne à l'exécution 

Thread 1: 0
Thread 2: 0
Thread 1: 1
Thread 2: 1
Thread 1: 2
Thread 2: 2
Thread 1: 3
Thread 2: 3
Thread 1: 4
Thread 2: 4


## Partages des données et synchronisation 

### Les Mutex 

Le partage de données nécessite parfois d'utiliser 
des techniques permettant de protéger à un instant donné 
une variable partagée par plusieurs threads.

Imaginons un simple tableau d'entier rempli par 
un thread (lent) et lu par un autre 
(plus rapide).

Le thread de lecture doit attendre la fin du remplissage du tableau 
avant d'afficher son contenu.

Pour cela, on peut utiliser le système 
des MUTEX (MUtual EXclusion) afin de protéger le 
tableau pendant de son remplissage:

#include <stdio.h>
#include <stdlib.h>
#include <phthread.h>
#include <unistd.h>

static pthread_mutex_t my_mutex;
static int tab[5];

void *read_tab_process(void * arg)
{
    int i;

    pthread_mutex_lock (&my_mutex);
    for (i = 0; i != 5; i++)
        printf ("read_process, tab[%d] vaut %d\n", i, tab[i]);
    pthread_mutex_unlock (&my_mutex);
    pthread_exit (0);
}

void *write_tab_process (void * arg)
{
    int i;

    phtread_mutex_lock (&my_mutex);
    for (i = 0; i != 5; i++) {
        tab[i] = 2 * i;
        printf ("write_process, tab[%d] vaut %d\n", i, tab[i]);
        slep (1); /* Ralentit le thread d'écriture*/
    }
    pthread_mutex_unlock (&my_mutex);
    phtread_exit(0)
}

main (int ac, char **av)
{
    pthread_t th1, th2;
    void *ret;

    pthread_mutex_init (&my_mutex, NULL);

    if (pthread_create (&th1, NULL, write_tab_process, NULL) < 0) {
        fprintf (stderr, "pthread_create error for thread 2\n");
        exit (1);
    }

    (void)pthread_join (th1, &ret);
    (void)pthread_join (th2, &ret);
}

La fonction pthread_mutex_lock verrouille le MUTEX 
pendant la durée du remplissage du tableau.

Le thread de lecture est contraint d'attendre l'appel 
à pthread_mutex_unlock pour verrouiller 
à son tour le MUTEX et lire le tableau correct.


-pthread tells the compiler to link in the pthread 
library as well as configure the compilation for threads.


## Les sémaphores POSIX

La bibliothèques LinuxThreads fournit également 
une implémentation des sémaphores POSIX 1003.1b.

L'utilisation de sémaphores permet aussi la 
synchronisation entre plusieurs threads.

Voici un exemple simple:

#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>

static sem_t my_sem;
int the_end;

void *thread1_process (void * arg)
{
    while (!the_end) {
        printf ("Je t'attend !\n");
        sem_wait (&my_sem);
    }

    printf ("OK, je sors !\n");
    pthread_exit (0);
}

void *thread2_process (void * arg)
{
    register int i;

    for (i = 0; i < 5; i++) {
        printf ("J'arrive %d !\n", i);
        sem_post (&my_sem); /* Pour débloquer le dernier sem_wait */
        pthread_exit (0);
    }
}

void main (int ac, char **av)
{
    pthread_t th1, th2;
    void *ret;

    sem_init (&my_sem, 0, 0);

    if (pthread_create (&th1, NULL, thread1_process, NULL) < 0) {
        fprintf (stderr, "pthread_create error for thread 1\n");
        exit (1);
    }

    if (pthread_create (&th2, NULL, thread2_process, NULL) < 0) {
        fprintf (stderr, "pthread_create error for thread 2\n");
        exit (1);
    }
    
    (void)pthread_join (th1, &ret);
    (void)pthread_join (th2, &ret);
}

## JOINABLE ou DETACHED 

Dans les exemples précédents, les 
threads sont crées en mode JOINABLE,
cad que le processus qui a crée le thread attend la 
fin de celui-ci en restant bloqué sur l'appel 
à pthread-join. Lorsque le thread se termine,
les ressources mémoire du thread sont libérées 
grâce à l'appel à pthread_join.

Si cet appel n'est pas effectuée, la mémoire 
n'est pas libérée et il s'en suit une fuite 
de mémoire.

Pour éviter un appel systèmatique à pthread_join 
(qui peut parfois être contraignant), on peut 
créer le thread en mode DETACHED.

Dans ce cas la, la mémoire sera correctement libérée à 
la fin du thread.

Pour cela il faut ajouter le code suivant:

pthread_attr_t thread_attr;

if (pthread_attr_init (&thread_attr) != 0) {
    fprintf (stderr, "pthread_attr_init error");
    exit (1);
}

if (pthread_attr_setdetachstate (&thread_attr, PTHREAD_CREATE_DETACHED) != 0) {
    fprintf (stderr, "pthread_attr_init_error");
    exit(1);
}

puis de créer les threads avec des appels du type:

if (pthread_create (&th1, &thread_attr, thread1_process, NULL) < 0) {
    fprintf (stderr, "pthread_create error for thread 1\n");
    exit (1);
}

## Destruction de thread: cancellation 

Les exemples ci-dessus utilisait la fonction pthread_exit
pour la destruction d'un thread
(en fait le thread se détruisait tout seul).

Il existe un mecanisme dans lequel un thread peut 
en détruire un autre à condition que ce dernier 
ait validé cette possibilité.

Le comportnement par défault est 
de type décalé (deferred).
Lorsqu'on envoit une requête de destruction 
d'un thread, celle-ci n'est exécuté que lorsque 
ce thread passe par un cancellation point 
comme par exemple l'appel à la fonction pthread_testcancel.

#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <unistd.h>

void *my_thread_process (void * arg)
{
    int i;

    pthread_setcancelstate(PTHREAD_CANCEL_ENABLE, NULL);

    for (i = 0; i < 5; i++) {
        printf ("Thread %s: %d\n", (char*)arg, i);
        sleep (1);
        pthread_testcancel ();
    }
}

main (int ac, char **av)
{
    pthread_t th1, th2;
    void *ret;

    if (pthread_create (&th1, NULL, my_thread_process, "1") < 0) {
        fprintf (stderr, "pthread_create error for thread 1\n");
        exit (1);
    }

    sleep (2);
    if (pthread_cancel (th1) != 0) {
        fprintf (stderr, "pthread_cancel error for thread 1\n");
        exit (1);
    }

    (void)pthread_join (th1, &ret);
}

Le thread un accepte les destruction
par l'appel à la fonction pthread_setcancelstate
au début du thread puis teste les demandes de destruction
par pthread_testcancel.

Au bout de deux secondes,
le thread est détruit par un appel à pthread_cancel
dans le programme principal.



void *my_thread_process (void * arg)
{
  int i;

  pthread_setcancelstate(PTHREAD_CANCEL_ENABLE, NULL);
  pthread_setcanceltype(PTHREAD_CANCEL_ASYNCHRONOUS, NULL);

  for (i = 0 ; i < 5 ; i++) {
    printf ("Thread %s: %d\n", (char*)arg, i);
    sleep (1);
  }
}

## Debug d'un programme multi-thread sous Linux 

Les dernières versions de gdb et de la glibc 
permettent de debugger un programme LINUX utilisant du multi-threading.

Voici un petit exemple de session gdb sur le programme d'exemple thread1.

L'action sur next exécute la fonction pthread_create qui provoque la création du thread 1.


## Conclusion 

L'utilisation du multi-threading permet de faciliter la programmation
d'un grand nombres d'applications de type serveur ou multimédia,
tout en améliorant les fonctionnalités du programme
par rapport à une solution classique basée sur
l'utilisation des créations de processus (fork).

Les pointeurs suivants vous seront utiles si vous vous lancez dans le multi-threading:
La bibliothèque LinuxThreads sur http://pauillac.inria.fr/~xleroy/linuxthreads
Le site "Programming POSIX threads" sur http://www.humanfactor.com/pthreads
Si vous voulez porter vos applicatifs sur Win32, la bibliothèque "POSIX Threads (pthreads) for Win32" sur http://sourceware.cygnus.com/pthreads-win32
La FAQ du groupe de discussion comp.programming.threads sur http://www.serpentine.com/~bos/threads-faq


Inria inventeur du monde numérique