
# Transport Layer Security

TLS ou Sécurité de la couche de transport, et son prédécesseur
Secure Sockets Layer (SSL), sont des protocoles de sécurisation
des échanges sur Internet.

 Le protocole SSL a été développé à l'origine par Netscape.
 L'IETF en a poursuivi le développement en le rebaptisant
 Transport Layer Security (TLS).

 On en parle parfois de SSL/TLS pour désigner indifféremment SSL ou TLS.

 TSL (ou SSL) fonctionne suivant un mode client-serveur.

 Il permet de satisfaire aux objectifs de sécurité suivants:

- l'authentification du serveur

- la confidentialité des données échangées (ou session chiffrée);

-,l'intégrité des données échangées;

- de manière optionnelle, l'authentification du client (mais dans la réalité celle-ci
est souvent assurée par le serveur).

Le protocole est très largement utilisé, sa mise en oeuvre est facilité par le fait que les
protocoles de la couche application, comme HTTP, n'ont pas été profondément modifiés
pour utiliser une connexion sécurisée, mais seulement implémentés au-dessus de SSL/TLS,
ce qui pour HTTP a donné le protocole HTTPS.

Un groupe de travail spécial de l'IETF a permis la création du TLS
et de son équivalent en mode UDP, le DTLS.

Depuis qu'il est repris par l'IETF, le protocole TLS a connu trois versions, TLS v1.0 en
1999, TLS v1.1 en 2006 et TLS v1.2 en 2008.

Un premier brouillon de TLS v1.3 est sorti en 2014.



## Présentation

Au fur et à mesure qu'internet se développait, de plus en plus de sociétés commerciales
se mire,t à proposer des achats en ligne pour les particuliers.

L'offre se mit à croitre mais le chiffre d'affaires dégagé par le commerce électronique restait modeste
tant que les clients n'avaient pas une confiance suffisante dans le paiement par carte bancaire.

Une des facons de sécuriser ce paiement fut d'utiliser des protocoles d'authentification et de chiffrement
tels que le SSL.

En 2009, TLS est utilisé par la plupart des navigateur Web.
L'internaute peut reconnaître qu'une transaction est chiffrée à plusieurs signes:

- l'URL dans la barre d'adresse commence par https ( https://...) et non http ;

- affichage d'une clé ou d'un cadenas, dont l'emplacement varie selon le navigateur :
généralement à gauche de la barre d'adresse
mais aussi dans la barre inférieure de la fenêtre ;

- les navigateurs peuvent ajouter d'autres signes,
comme le passage en jaune de la barre d'adresse (cas de Firefox sur d'anciennes versions).


## Historique

Protocole SSL


La première version de SSL parue, la SSL 2.0,
possédait un certain nombre de défauts de sécurité,
parmi les lequels la possiilité de forcer l'utilisation d'algorithmes de chiffrement plus
faibles, ou bien une absence de protection pour la prise de contact et la possibilité
pour un attaquant d'éxecuter des attaques par troncature.

Les protocoles PCT 1.0, puis SSL 3.0, furent dévéloppés.


## Protocole TLS

Le protocole TLS n'est pas strucurellement différent de la version 3 de SSL, mais des
modifications dans l'utilisation des fonctions de hachage font que les deux protocoles ne sont pas
dirrectement interopérables. Cependant TLS, comme SSLv3, intègre un mécanisme de compatibilté ascendante
avec les versions précédentes, c'est à dire qu'au début de la phase de négociation,
le client et le serveur négocient la "meilleur" version du protocole disponible par tous deux.

Pour des raisons de sécurité, détaillées dans la RFC 6176 parue en 2011,
la compatibilité de TLS avec la version 2 de SSL est abandonnée.


## Authentification par certificat numérique

Dans la majoité des cas, l'utilisateur authentifie le serveur TLS sur lequel il se connecte.
Cette authentification est réalisé par l'utilisation d'un certificat numérique X.509 délivré par
une autorité de certification (CA).

Des applications web peuvent utiliser l'authentification du poste client en exploitant TLS.

Il est alors possible d'oofrif une authentification mutuelle entre le client et le serveur.

Le certificat client peut être stocké au format logiciel sur le poste client ou
fourni par un dispositif matériel (carte à puce, token USB).

Cette solution permet d'offrir des mécanismes d'authentification forte.


## Principe de fonctionnement dans les navigateurs web

Lorsqu'un utilisateur se connecte à un site web qui
utilise TLS, les étapes suivantes ont lieu:

1. Le navigateur du client envoie au serveur une demande de mise en place
de connexion sécurisée par TLS.

2. Le serveur envoie au client son certificat:
celui-ci contient sa clé publique, ses informations (nom de la société,
addresse postale, pays, e-mail de contact...) ainsi qu'une signature numérique
sous forme de texte chiffré.

3. le navigateur du client tente de déchiffrer la signature
numérique du certificat du serveur en utilisant les clés publiques contenues dans les certificats
des autorités de certifications (AC) intégrés par défaut dans le navigateur.

  1. Si l'une d'entre elles fonctionne, le navigateur web en déduit le nom de l'autorité de certification
  qui a signé le certificat envoyé par le serveur. Il vérifie que celui-ci n'est pas expiré puis envoie une
  demande OCSP à cette autorité pour vérifir que le certificat du serveur n'a pas été révoqué.

  2. Si aucune d'entre lles ne fonctionne, le navigateur web tente de déchiffrer la signature
  numérique du certificat du serveur à l'aide de la clé publique contenue dans celui-ci.

     1. En cas de réussite, cela signifie que le serveur web a lui même signé son certificat.
     Un message d'avertissement s'affiche alors sur le navigateur web,
     prévenant l'utilisateur que l'identité du serveur n'a pas été vérifiée par une autorité de certification.

     2. En cas d'echec, le certificat est invalide, la connexion ne peut pas aboutir.

4. Le navigateur du client génère une clé de chiffrement symétrique (à la différence des clés privés et publiques utilisés par les certificats qui sont asymétriques),
appelée clé de session, qu'il chiffre avec la clé publique contenue dans le certificat su serveur puis transmet cette clé de session au serveur.

5. Le serveur déchiffre la clé de session envoyée par le client grâce à sa clé privée.

6. Le client et le serveur commencent à s'échanger des données en chiffrent celles-ci avec la clé de session
qu'ils ont en commun.

>On considère à partir de ce moment que la connexion TLS est alors établie entre le client et le serveur.

7. Une fois la connexion terminée (déconnexion volontaire de l'utilisateur ou si durée d'inactivité trop élevée),
le serveur révoque la clé de session.

Optionnel: si le serveur nécessite également que le client s'authentifie, le client lui envoie son
propre certificat en même temps que la clé de session. Le serveur procède alors comme détaillé au point n°3 pour vérifier que le certificat du client est valide.


## Attaques

// à completer plus tard.

## Spécification techniques

Dans la pile de protocole TCP/IP SSL se situe entre la couche application
(comme HTTP, FTP, SMTP...) et la couche transport TCP.

Son utilisation la plus commune reste cependant en dessous de HTTP.

Le protocole SSL est implémenté par la couche session de la pile.
ce qui à deux conséquences:

- Pour toute application existante utilisant le TCP, il peut exister une application utilisant SSL.
Ex: l'application HTTPS correspond à HTTP au-dessus de SSL;

- Une applcation SSL se voit attribuer un nouveau numéro de port par l'IANA.
Ex: HTTPS est associé au port 443.
Dans certain cas le même port est utilisé avec et sans le SSL.

Dans ce cas, la connexion est initiée en mode non chiffré.
Le tunnel est ensuite mis en place au moyen du mécanisme StartTLS.

C'est le cas, par exemple des protocoles IMAP, SMTP ou LDAP.

La securité est réalisé d'une part par un chiffrement asymétrique,
comme le chiffrement RSA, qui permet, après authentification de la clé publique du serveur,
la constitution d'un secret partagé entre le client et le serveur, d'autre part par un
chiffrement symétrique (beaucoup plus rapide que le chiffrement asymétriques), comme l'AES,
qui est utilisé dans la phase d'échange de données, les clés de chiffrement symétrique étant calculées à partir
du secret partagé.

Une fonction de hashage, comme SHA-1, est également utilisé, entre autres, pour assurer l'intégrité et
l'authentification des données (via par exemple HMAC).
