
# Git branching - branch management

The git branch command list current branches :

$ git branch
iss53
* master
testing
the "*" caracter is for the HEAD pointer.

To see the last commit on each branch,
you can run git branch -v:

$ git branch -v
iss53   93b412c fix javascript issue
* master  7a98805 Merge branch 'iss53'
testing 782fd34 add scott to the author list in the readmes

The useful --merged and --no-merged options can filter this
list to branches that you have or have not yet merged into
the branch you're currently on.
To see which branches are already merged into the branch you're on,
you can run git branch --merger:

$ git branch --merged
iss53
* master

Because you already merged in iss53 earlier, you see
it in your list. Branches on this list without the *
in front of them are generally fine to delete with git branch -d;
you've already incorporated their work into another branch,
so you're not going to lose anything.

To see all the branches that contain work you haven't yet merged in,
you can run git branch --no-merged:

$ git branch --no-merged
 testing

This shows your other branch. Because it contains work that isn't merged in yet.
Trying to delete it with git branch -d will fail:

$ git branch -d testing
error: The branch 'testing' is not fully merged.
If you are sure you want to delete it, run 'git branch -D testing'.

If you really do want to delete that branch,
you can force with -D.
