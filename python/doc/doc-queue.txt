
## Queue - A synchronized queue class

The queue module implements multi-producer, multi-consumer 
queues. It is especially useful in threaded programming when information 
must be exchanged safely between multiple threads.

The Queue class in this module implements al the required 
locking semantics.

It depends on the availability of thread support 
in Python.

## The Queue module

### class queue.Queue(maxsize=0)

Constructor for a FIFO queue.
maxsize is an integer that sets the upperbound limit on the number of items that can be placed in the queue.

If maxsize is less than or equal to zero, the queue size is infinite.

### class queue.LifoQueue(maxsize=0)

Constructor for a LIFO queue.


### class queue.PriorityQueue(maxsize=0)

Constructor of a priority queue.


### class queue.SimpleQueue
Constructor for an unbounded FIFO queue.


### exception queue.Empty 

Exception raised when an unbounded FIFO queue.
Simple queues lack advanced functionality such as tack tracking.

### exception queue.Full
Exception raised when non-blocking put()
(or put_nowait()) is called on a Queue object which is full.


## Queue Objects 

Queue objects (Queue, LifoQueue, or PriorityQueue)
provide the public methods described below.


### Queue.qsize()

Return the approximate size of the queue.


### Queue.empty()

Return True if the queue is empty, False otherwise.


### Queue.full()

Return True if the queue is full, False otherwise.


### Queue.put(item, block=True, timeout=None)¶

Put item into the queue. If optional args block is true 
and timeout is None (the default), block if necessary 
until a free slot is availble.


### Queue.put_nowait(item)

Equivalent to put(item, False).


### Queue.get(block=True, timeout=None)

Remove and return an item from the queue.


### Queue.join()

Blocks until all items in the queue
have been gotten and processed.

Ex:

def worker()
    while True:
        item = q.get()
        if item is None:
            break
        do_work(item)
        q.task_done()

q = queue.Queue()

threads = []

for i in range(num_worker_threads):
    t = threading.Thread(target=worker)
    t.start()
    threads.append(t)

for item in source():
    q.put(item)

# block until all tasks are done 
q.join()

# stop workers
for i in range(num_worker_threads):
    Q.put(None)
for t in threads:
    t.join()