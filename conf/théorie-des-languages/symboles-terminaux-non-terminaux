#Symboles terminaux et non terminaux:

en théorie des langages, on appelle
symboles terminaux et non terminaux les symboles utilisés
dans les règles de production d'une grammaire formelle.
Les symboles terminaux et les symboles non-terminaux
font partie d'ensembles disjoints.

##Symboles terminaux:
sont des caractères littéraux qui peuvent apparaitre dans les règles de productions
(entrée ou sortie) d'une grammaire formelle et ne peuvent pas être subdivisé en éléments plus petis.
Ce sont des éléments qui ne peuvent pas être changés via des règles de la grammaire.

Dans un compilateur, l'analyseur lexical lit les caractères
du programmes source, les groupes en unités sémantiques appelées lexèmes, et
produit des jetons représentant ces lexèmes.
Un jeton est constitué de deux éléments, un nom et une valeur d'attribut.
Les noms de jetons sont des symboles abstraits qui sont utilisés par le parser
pour l'analyse syntaxique. On appellera souvent ces noms de jetons terminaux,
dans la mesure ou ils apparaissent en symboles terminaux dans la grammaire d'un language de programmation.
La valeur de l'attribut, si elle existe, est un pointeur vers la table des symboles qui donne plus d'info.
Ces infos ne font pas partie de la grammaire, donc sur le sujet de l'analyse syntaxique, on fera référence
aux jetons et aux terminaux de facon synonyme.

Les symboles terminaux, sont des symboles élémentaire.


##Symboles non-terminaux:
Les symboles non-terminaux, sont les symboles qui peuvent être remplacés;
il y a donc des chaines composées de symboles terminaux
variable syntactique.

Une grammaire non contexuelle est une grammaire dans la quelle le membre
gauche de chaque règle de production est un seul symbole non-terminal.
Cette restriction est non triviale, tous les langages ne peuvent pas
être générés par des grammaires non contextuelles. Ceux-là sont appelés languages non contextuels.
Ce sont ces languages-là qui sont reconnus par des automates à pile non-deterministes.
Les langages non-contextuels constituent la base théorique de la syntaxe de la plupart des langages de programmation.


##Règles de production:

Une grammaire est définie par des règles de production qui spécifient
quels lexèmes remplacent quels autres lexèmes;
ces règles peuvent être utilisées pour engendrer des chaînes
de caractères ou pour les analyser.
Toute règles peuvent être utilisiées pour engendrer de chaînes de caractères
ou pour analyser.
Toute regle de production a une tête, ou membre de gauche, qu représente la chaîne à remplacer,
et corps ou membre droit qui représente la chaîne qui va la remplacer.
Les règles sont souvent écrites sous la forme tête -> corps;
Par exemple la règle z0 -> z1 spécifie que z0 peut etre remplacé pa z1.

Grammaires génératives de chomsky:
- ensemble fini N de symboles non-terminaux
- ensemble fini S de symboles terminaux disjoint de N
- ensemble fini P de règles de production, chaque règle étant de la forme
 (S U N)*N(S U N)* -> (S U N)*

 ou * est l'étoile de Kleene, tele que (S U N)* représente zéro ou plus symboles,
 et N correspond à un symbole non-terminal. Cela veut dire que chaque règle de production
 produit une chaine à partir d'une autre, celle-ci contenant au moins un symbole non-terminal.
- Un symbole A C N qui est le symbole de départ.

grammaire formelle = < N, S, P, A >

Ex:
<entier> ::= ['-'] <chiffre> {<chiffre>}
<chiffre> ::= '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9'

Dans cette grammaire, les symboles (-,0,1,2,3,4,5,6,7,8,9) sont terminaux ;
les symboles <chiffre> et <entier> sont non terminaux.
