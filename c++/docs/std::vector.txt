
# std::vector 

template<
    class T,
    class Allocator = std::allocator<T>
> class vector;


std::vector est un conteneur séquentiel qui encapsule les tableaux de taille dynamique .


Les éléments sont stockés de façon contigüe, ce qui signifie que les éléments sont accessibles non seulement via les itérateurs, mais aussi à partir des pointeurs classiques sur un élément.

Cela signifie qu'un pointeur sur un élément d'un vector peut être passé à une fonction qui attend un pointeur sur un élément d'un tableau.

Le stockage du vector est pris en charge automatiquement, pouvant être augmenté ou diminué au besoin.


Les vector occupent généralement plus d'espace que les tableaux statiques,
du fait que de la mémoire supplémentaire est allouée pour anticiper un accroissement future. 

Ainsi, un vector n'a pas besoin de ré-allouer la mémoire chaque fois qu'un élément est inséré, mais seulement lorsque la mémoire additionnelle est épuisée.


La quantité totale de mémoire allouée peut être
obtenue en utilisant la fonction capacity().


La mémoire additionnelle peut être rendue au système
via un appel à shrink_to_fit().

Les ré-allocations sont généralement des opérations coûteuses en termes de performance. 


La fonction reserve() peut être utilisée pour éliminer les ré-allocations lorsque la quantité maximum d'éléments est connue d'avance.


La complexité (efficacité) des opérations courante sur les vector sont les suivantes :

Accès aléatoire - constante O(1)
Insertion ou le retrait d'éléments à la fin - constante amortie O(1)
Insertion ou le retrait d'éléments - linéaire O(n)


std::vector répond aux exigences des concepts Container, AllocatorAwareContainer, SequenceContainer et ReversibleContainer.


Paramètre template
T	-	Type des éléments.
T doit satisfaire aux exigences de CopyAssignable et CopyConstructible.	(avant C++11)
Les exigences imposées sur les éléments dépendent des opérations à réaliser sur le conteneur. En règle générale, il est nécessaire que le type des éléments réponde aux exigences de MoveConstructible et MoveAssignable, mais de nombreuses fonctions de membres imposent des exigences plus strictes.

(depuis C++11)
Allocator	-	Un allocateur, utilisé pour l'acquisition de la mémoire pour stocker les éléments. Le type doit répondre aux exigences de Allocator.

Itérateurs
begin
cbegin  
 
retourne un itérateur au début 

 
(fonction membre publique)
end 
cend  
 
retourne un itérateur à la fin 

 
(fonction membre publique)
rbegin
crbegin  
 
retourne un itérateur inversé au début 
(fonction membre publique)
rend
crend  
 
retourne un itérateur inversé à la fin 
(fonction membre publique)
Capacité
empty 
vérifie si le conteneur est vide 

 
(fonction membre publique)
size 
retourne le nombre d'éléments 

 
(fonction membre publique)
max_size 
retourne le plus grand nombre possible d'éléments 

 
(fonction membre publique)
reserve 
réserve de l'espace mémoire 
(fonction membre publique)
capacity 
renvoie le nombre d'éléments qui peuvent être contenus dans l'espace mémoire actuellement alloué 
(fonction membre publique)
shrink_to_fit  (C++11) 
réduit l'utilisation de la mémoire en libérant la mémoire inutilisée 

 
(fonction membre publique)
Manipulateurs
clear 
efface le contenu 

 
(fonction membre publique)
insert 
insère des éléments 

 
(fonction membre publique)
emplace  (C++11) 
construit des éléments en mémoire 
(fonction membre publique)
erase 
efface des éléments 
(fonction membre publique)
push_back 
ajoute des éléments à la fin

 
(fonction membre publique)
emplace_back  (C++11) 
construit des éléments en place à la fin 
(fonction membre publique)
pop_back 
supprime le dernier élément 

 
(fonction membre publique)
resize 
modifie le nombre d'éléments stockés 

 
(fonction membre publique)
swap 
permute les contenus 

 
(fonction membre publique)



https://fr.cppreference.com/w/cpp/container/vector




